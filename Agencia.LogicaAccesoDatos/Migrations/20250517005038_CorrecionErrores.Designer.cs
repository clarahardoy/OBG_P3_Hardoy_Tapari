// <auto-generated />
using System;
using System.Collections.Generic;
using Agencia.LogicaAccesoDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agencia.LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250517005038_CorrecionErrores")]
    partial class CorrecionErrores
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Entidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntidadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpleadoAutorId")
                        .HasColumnType("int");

                    b.Property<int?>("EnvioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoAutorId");

                    b.HasIndex("EnvioId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Envio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgenciaOrigenId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("NroTracking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<string>("TipoEnvio")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("AgenciaOrigenId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Envios");

                    b.HasDiscriminator<string>("TipoEnvio").HasValue("Envio");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DireccionPostal")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Ubicacion", "Agencia.LogicaNegocio.Entidades.Sucursal.Ubicacion#Ubicacion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Latitud")
                                .HasColumnType("int");

                            b1.Property<int>("Longitud")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.ComplexProperty<Dictionary<string, object>>("NombreCompleto", "Agencia.LogicaNegocio.Entidades.Usuario.NombreCompleto#NombreCompleto", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.EnvioComun", b =>
                {
                    b.HasBaseType("Agencia.LogicaNegocio.Entidades.Envio");

                    b.Property<int>("AgenciaDestinoId")
                        .HasColumnType("int");

                    b.HasIndex("AgenciaDestinoId");

                    b.HasDiscriminator().HasValue("Comun");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.EnvioUrgente", b =>
                {
                    b.HasBaseType("Agencia.LogicaNegocio.Entidades.Envio");

                    b.Property<string>("EntregaEficiente")
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("DireccionDestino", "Agencia.LogicaNegocio.Entidades.EnvioUrgente.DireccionDestino#Direccion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CodigoPostal")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Departamento")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasDiscriminator().HasValue("Urgente");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Comentario", b =>
                {
                    b.HasOne("Agencia.LogicaNegocio.Entidades.Usuario", "EmpleadoAutor")
                        .WithMany()
                        .HasForeignKey("EmpleadoAutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Agencia.LogicaNegocio.Entidades.Envio", null)
                        .WithMany("Seguimiento")
                        .HasForeignKey("EnvioId");

                    b.Navigation("EmpleadoAutor");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Envio", b =>
                {
                    b.HasOne("Agencia.LogicaNegocio.Entidades.Sucursal", "AgenciaOrigen")
                        .WithMany()
                        .HasForeignKey("AgenciaOrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agencia.LogicaNegocio.Entidades.Usuario", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agencia.LogicaNegocio.Entidades.Usuario", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgenciaOrigen");

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.EnvioComun", b =>
                {
                    b.HasOne("Agencia.LogicaNegocio.Entidades.Sucursal", "AgenciaDestino")
                        .WithMany()
                        .HasForeignKey("AgenciaDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgenciaDestino");
                });

            modelBuilder.Entity("Agencia.LogicaNegocio.Entidades.Envio", b =>
                {
                    b.Navigation("Seguimiento");
                });
#pragma warning restore 612, 618
        }
    }
}
